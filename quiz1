<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Software Architecture & Design Patterns Quiz</title>
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
        background: #f7f7f7;
    }
    h1 {
        text-align: center;
    }
    .question {
        background: white;
        padding: 15px;
        margin: 10px 0;
        border-radius: 8px;
        box-shadow: 0 0 5px rgba(0,0,0,0.1);
    }
    button {
        padding: 10px 15px;
        margin-top: 15px;
        cursor: pointer;
    }
    #result, #answers {
        margin-top: 20px;
        padding: 15px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 0 5px rgba(0,0,0,0.1);
    }
</style>
</head>
<body>

<h1>Software Architecture & Design Patterns Quiz</h1>
<form id="quizForm">
    <div class="question">
        <p>1. What does software architecture define?</p>
        <label><input type="radio" name="q1" value="a"> Low-level implementation details</label><br>
        <label><input type="radio" name="q1" value="b"> High-level structure and component interactions</label><br>
        <label><input type="radio" name="q1" value="c"> Only user interface layouts</label>
    </div>

    <div class="question">
        <p>2. Which is NOT a key architectural approach?</p>
        <label><input type="radio" name="q2" value="a"> MVC</label><br>
        <label><input type="radio" name="q2" value="b"> Layered</label><br>
        <label><input type="radio" name="q2" value="c"> Waterfall</label>
    </div>

    <div class="question">
        <p>3. In MVC, which component handles business logic and data?</p>
        <label><input type="radio" name="q3" value="a"> View</label><br>
        <label><input type="radio" name="q3" value="b"> Controller</label><br>
        <label><input type="radio" name="q3" value="c"> Model</label>
    </div>

    <div class="question">
        <p>4. What does the Layered Architecture emphasize?</p>
        <label><input type="radio" name="q4" value="a"> Vertical dependencies</label><br>
        <label><input type="radio" name="q4" value="b"> Horizontal separation of concerns</label><br>
        <label><input type="radio" name="q4" value="c"> Real-time updates</label>
    </div>

    <div class="question">
        <p>5. In Microservices, each service should be:</p>
        <label><input type="radio" name="q5" value="a"> Loosely coupled and focused on a specific business capability</label><br>
        <label><input type="radio" name="q5" value="b"> Tightly integrated into a monolith</label><br>
        <label><input type="radio" name="q5" value="c"> Only database-oriented</label>
    </div>

    <div class="question">
        <p>6. Which design pattern ensures only one instance of a class exists?</p>
        <label><input type="radio" name="q6" value="a"> Singleton</label><br>
        <label><input type="radio" name="q6" value="b"> Observer</label><br>
        <label><input type="radio" name="q6" value="c"> Factory</label>
    </div>

    <div class="question">
        <p>7. The Factory pattern is used to:</p>
        <label><input type="radio" name="q7" value="a"> Automatically update UI</label><br>
        <label><input type="radio" name="q7" value="b"> Create objects without specifying exact classes</label><br>
        <label><input type="radio" name="q7" value="c"> Manage global resources</label>
    </div>

    <div class="question">
        <p>8. Which pattern defines a one-to-many dependency between objects?</p>
        <label><input type="radio" name="q8" value="a"> Observer</label><br>
        <label><input type="radio" name="q8" value="b"> Singleton</label><br>
        <label><input type="radio" name="q8" value="c"> Layered</label>
    </div>

    <div class="question">
        <p>9. Which architectural pattern is common in enterprise systems?</p>
        <label><input type="radio" name="q9" value="a"> Microservices</label><br>
        <label><input type="radio" name="q9" value="b"> Layered</label><br>
        <label><input type="radio" name="q9" value="c"> Observer</label>
    </div>

    <div class="question">
        <p>10. MVC improves testability by:</p>
        <label><input type="radio" name="q10" value="a"> Combining logic and UI</label><br>
        <label><input type="radio" name="q10" value="b"> Separating concerns</label><br>
        <label><input type="radio" name="q10" value="c"> Using multiple databases</label>
    </div>

    <div class="question">
        <p>11. Microservices communicate primarily through:</p>
        <label><input type="radio" name="q11" value="a"> Shared memory</label><br>
        <label><input type="radio" name="q11" value="b"> APIs</label><br>
        <label><input type="radio" name="q11" value="c"> Local files</label>
    </div>

    <div class="question">
        <p>12. The primary goal of design patterns is to:</p>
        <label><input type="radio" name="q12" value="a"> Provide reusable solutions to common problems</label><br>
        <label><input type="radio" name="q12" value="b"> Replace programming languages</label><br>
        <label><input type="radio" name="q12" value="c"> Reduce team size</label>
    </div>

    <div class="question">
        <p>13. Which is a trade-off of using patterns?</p>
        <label><input type="radio" name="q13" value="a"> They may add unnecessary complexity</label><br>
        <label><input type="radio" name="q13" value="b"> They always reduce code length</label><br>
        <label><input type="radio" name="q13" value="c"> They remove the need for testing</label>
    </div>

    <div class="question">
        <p>14. In Layered Architecture, the Data Access Layer:</p>
        <label><input type="radio" name="q14" value="a"> Handles user input</label><br>
        <label><input type="radio" name="q14" value="b"> Manages database interactions</label><br>
        <label><input type="radio" name="q14" value="c"> Controls business logic</label>
    </div>

    <div class="question">
        <p>15. Which combination shows synergy between patterns?</p>
        <label><input type="radio" name="q15" value="a"> MVC + Singleton + Factory + Observer</label><br>
        <label><input type="radio" name="q15" value="b"> Waterfall + Observer</label><br>
        <label><input type="radio" name="q15" value="c"> Singleton + Monolith</label>
    </div>

    <button type="button" onclick="submitQuiz()">Submit Quiz</button>
</form>

<div id="result"></div>
<div id="answers" style="display:none;"></div>

<script>
const correctAnswers = {
    q1: "b", q2: "c", q3: "c", q4: "b", q5: "a",
    q6: "a", q7: "b", q8: "a", q9: "b", q10: "b",
    q11: "b", q12: "a", q13: "a", q14: "b", q15: "a"
};

function submitQuiz() {
    const form = document.forms["quizForm"];
    let score = 0;
    let total = Object.keys(correctAnswers).length;
    let userAnswers = {};

    for (let key in correctAnswers) {
        const answer = form[key].value;
        userAnswers[key] = answer;
        if (answer === correctAnswers[key]) score++;
    }

    document.getElementById("result").innerHTML = 
        `<h2>Your Score: ${score} / ${total}</h2><p>Answers will be available in 10 minutes.</p>`;

    setTimeout(() => {
        let ansHTML = "<h3>Correct Answers:</h3><ol>";
        for (let key in correctAnswers) {
            ansHTML += `<li>Q${key.replace("q", "")}: ${correctAnswers[key].toUpperCase()}</li>`;
        }
        ansHTML += "</ol>";
        document.getElementById("answers").innerHTML = ansHTML;
        document.getElementById("answers").style.display = "block";
    }, 10 * 60 * 1000); // 10 minutes
}
</script>

</body>
</html>
